**********************************************************************************************************************
Baron Heinrich
COSC 2125/2325
Lab 6
03/21/14
**********************************************************************************************************************



**********************************************************************************************************************
VetVisit.java
**********************************************************************************************************************

package lab6;

import java.util.GregorianCalendar;
import java.util.Random;

public abstract class VetVisit implements Comparable <VetVisit>
{
	private String visitId;
	private GregorianCalendar date;
	public static final int MAX_ID_LENGTH = 4;
	private String doctor;
	private String location;

	public VetVisit()
	{
		this.setVisitId(generateNewId());
		this.setDate("1/1/2000");
		this.setDoctor("**no doctor**");
		this.setLocation("**no location**");
	}
	public VetVisit(String theDate, String theDoctor, String theLocation)
	{
		this.setDate(theDate);
		this.setDoctor(theDoctor);
		this.setVisitId(generateNewId());
		this.setLocation(theLocation);

	}
	//pre: none
	//post: returns a textual string representing this vet visit
	public String toString()
	{
		String temp = "";
		temp+= this.getVisitId() + " " +
				this.getDateString() + " " +
				this.getDoctor() + " " +
				this.getLocation() ;
		return temp;

	}
	//pre:  none                                                                                       
	//post: returns the id of the visit
	public String getVisitId()
	{
		return this.visitId;
	}
	//pre: none                                                                                        
	//post: returns the doctor                                                   
	public String getDoctor()
	{
		return this.doctor;
	}
	//pre: none
	//post: return this location
	public String getLocation()
	{
		return this.location;
	}

	//pre: none                                                                                        
	//post: returns the date in format mm/dd/yyyy                                                      
	public String getDateString()
	{
		return lab6.MyUtils.dateToString(date);
	}
	public GregorianCalendar getDateCalendar()
	{
		return this.date;
	}
	//pre: none
	//post: returns a 4 character id (random, and we'll assume unique)
	private String generateNewId()
	{ 
		String chars = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String result = "";
		Random rand = new Random();
		for(int i=0; i< MAX_ID_LENGTH; i++)
		{   int randNum = rand.nextInt(chars.length());
		char ch = chars.charAt(randNum);
		result += ch;
		}
		return result;
	}   
	// pre: the vetVisitId has length 4, letters/digits case-sensitive                               
	// post: the id has been set to the first 4 characters of theVetVisitId                         
	public void setVisitId(String theVisitId)
	{
		if(theVisitId.length() > MAX_ID_LENGTH)
			theVisitId=theVisitId.substring(0,MAX_ID_LENGTH);
		this.visitId = theVisitId;
	}
	//pre: theDate is a valid date as a String form mm/dd/yyyy including /'s                           
	//post: theDate is stored as given date                                                            
	public void setDate(String theDate)
	{
		this.date = MyUtils.stringToDate(theDate);
	}
	//pre: none                                                                                        
	//post: Set doctor, removes spaces from name and sets it to uppercase                                                     
	public void setDoctor(String theDoctor)
	{
		if(theDoctor.equals(""))
			theDoctor="**no doctor**";
		
		String blank="";
		int len=theDoctor.length();
		for(int i=0; i<len; i++)
		{
			char ch=theDoctor.charAt(i);
			if(!Character.isWhitespace(ch))
			blank+=ch;
		}
		this.doctor = blank.toUpperCase().trim();
	}
	//pre: theLocation is not empty, if so uses **no location**
	// post: stores theLocation or uses **no location** for empty string
	public void setLocation(String theLocation)
	{
		if(theLocation.equals(""))
		{
			theLocation="**no location**";
		}
		
		String blank="";
		int len=theLocation.length();
		for(int i=0; i<len; i++)
		{
			char ch=theLocation.charAt(i);
			if(!Character.isWhitespace(ch))
			blank+=ch;
		}
		
		this.location = blank;
	}
	//pre: visit is not null                                                                         
	// post: returns < 0, 0, > 0 if this date >, ==, < if == compares transactionid                          
	public int compareTo(VetVisit visit)
	{
		int result = this.getDateCalendar().compareTo(visit.getDateCalendar());
		if(result == 0)
		{
			result = this.getVisitId().compareTo(visit.getVisitId());

		}
		return result;
	}
	//@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result
				+ ((visitId == null) ? 0 : visitId.hashCode());
		return result;
	}
	//@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		VetVisit other = (VetVisit) obj;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (visitId == null) {
			if (other.visitId != null)
				return false;
		} else if (!visitId.equals(other.visitId))
			return false;
		return true;
	}
}// end of VetVisit class

**********************************************************************************************************************
VetVisitList.java
**********************************************************************************************************************
package lab6;

import java.io.PrintWriter;
import java.util.GregorianCalendar;

public interface VetVisitList
{
  //pre: none
  // post: returns number visits in the list
  public int size();  
  //pre: none
  // post: returns a String of all vet visits that occurred on given date
  public String getVetVisitListByDate(GregorianCalendar date);
  //pre: none
  //post: returns true if the list contains given VetVisit false if not in list.
  public boolean contains(VetVisit visit);
  // pre: none
  // post: adds vet visit to list if not in list already returns true if added, false if not
  //      list remains sorted by date at all times (most recent to least recent)
  public boolean add(VetVisit visit);
  // pre: none
  // post: returns vet visit  in list that matches given vet visit, removes it from list
  //       list remains sorted by date after removal. (most recent to least recent)
  public VetVisit remove(VetVisit visit);
  //pre: none
  // post: all vet visits removed from list
  public void removeAll();
  //pre: input is open and ready to read a list of zero or more VetVisit sets of data
  //post: input has been exhausted and stored into this list 
	
  public void writeToFile(PrintWriter out);
  //pre:  out is opened and ready to write to
  //post: this list is written to out in 'readable' format  so output is same form as input file's visit list format
}
**********************************************************************************************************************
VetVisitListImpl.java
**********************************************************************************************************************.
package lab6;

import java.io.PrintWriter;
import java.util.GregorianCalendar;

public class VetVisitListImpl implements VetVisitList {

	private int count;
	private Node<VetVisit>first;

	//pre: n/a
	//post: default constructor
	public VetVisitListImpl()
	{
		this.first=null;
		this.count=0;
	}
	
	//pre: n/a
	//post: returns count
	public int size()
	{
		return this.count;
	}

	@Override
	//pre: none
	// post: returns a String of all vet visits that occurred on given date
	public String getVetVisitListByDate(GregorianCalendar date) {
		//make a blank string
		//take string from argument and check all nodes
		//append found date to blank string
		//return blank string
		
		String blank="";
		for(Node<VetVisit> node=this.first; node!=null; node=node.link)
		{
			if(node.data.getDateCalendar().equals(date))
			//if(node.data.getDateCalendar()==date)
				blank=blank+node.data+"\n";
		}
		
		return blank;
	}

	//pre: VetVisit and visit
	//post: compares data and if it's the same it returns true, else returns false
	public boolean contains(VetVisit visit) {
		//compareTo date and chipId from visit data
		//if it equals 0 return true 

		Node<VetVisit>current=this.first;
		
		while(current!=null)
		{
			if(current.data.compareTo(visit)==0)
			{
				return true;
			}
			current=current.link;
		}

		return false;
	}

	//pre: VetVisit and vist
	//post: returns false if added visit exists, true if successfully added and increments count
	public boolean add(VetVisit visit) {
		//1. if already in the list return false
		//2. Find where to put it...
		//-must know where it is in the list, behind right node
		//get new node and put data into that node
		//connect the new node to the previous node
		//if previous value is null, connect first, otherwise connect at previous
		//increase count and return
		if(this.contains(visit))
		return false;
		
		Node<VetVisit>previous=null;
		Node<VetVisit>current=this.first;
		
		while(current!=null)
		{
			if(current.data.compareTo(visit)<0)
				break;
			previous=current;
			current=current.link;
		}
		Node<VetVisit>node=new Node<VetVisit>();
		node.data=visit;
		
		if(previous==null)
		{
			node.link=this.first;
			this.first=node;
		}
		else
		{
			node.link=previous.link;
			previous.link=node;
		}
		this.count++;
		return true;
	}

	//pre: VetVisit and visit
	//post: returns null if not found, returns visit if found and decrements count
	public VetVisit remove(VetVisit visit) 
	{
		//try to find visit in list, keep track of previous node and current node
		// if current is null, return null
		//if previous is null, disconnect the first node
		//disconnect previous if found, decrement count, and return data
		
		Node<VetVisit>previous=null;
		Node<VetVisit>current=this.first;
		
		while(current!=null)
		{
			if(current.data.compareTo(visit)==0)
				break;
			
			previous=current;
			current=current.link;

		}

		if(current==null)
		{
			return null;
		}
		
		if(previous==null)
		{
			this.first=this.first.link;
		}
		
		else
		{
			previous.link=current.link;
		}
		count --;
		return current.data;
		
		}
						
	//pre: n/a
	//post: sets count to 0 and first to null, clearing the list
	public void removeAll() 
	{
		this.first=null;
		this.count=0;
	}

	//pre:n/a
	//post: returns a string based the nodes 
	public String toString()
	{
		if(this.count==0)
		{
			String empty="Empty List";
			return empty;
		}
		String blank="";
		for(Node<VetVisit>node=this.first; node!=null; node=node.link)
		{
			blank=blank+node.data+"\n";
		}
		return blank;
	}
	
	//Add this method signature to your VetVisitList interface and its implementation to VetVisitListImpl
	//method in VetVisitList interface and its implementation
	//we need a way to write each VetVisit to the file properly and have no other method available to do so.
	//thus we are adding this method to the interface (so its available to use) and here is its implementation


	//pre:  out is opened and ready to write to
	//post: this list is written to out in 'readable' format  so output is same form as input file's visit list format
	public void writeToFile(PrintWriter out) {
			Node <VetVisit> node= this.first;
			while(node != null)
			{
				out.println(node.data.getDateString() + " " + node.data.getDoctor()+ "  " + node.data.getLocation());
				if(node.data instanceof VetVisitUrgent)
				{
					VetVisitUrgent visit = (VetVisitUrgent) node.data;
					out.println(visit.getDiagnosis());
					out.println(visit.getTreatment());
				}
				else
				{
					VetVisitStandard visit = (VetVisitStandard)node.data;
					out.println(visit.getVaccines());
					out.println(visit.getLicenseId() + "  " + visit.getOtherCare());
				}
				node = node.link;
			}//end while
			out.println("****");
		}
		  
	//note you will have to call the method above (writeToFile) inside the writeToFile for each HousePet.  Call the method
	//using the HousePet's visit list instance after you output the id, name, pet type and age.  
	//  ie:  this.visitList.writeToFile(out); 
	
}

**********************************************************************************************************************
VetVisitListStandard.java
**********************************************************************************************************************
package lab6;

public class VetVisitStandard extends VetVisit{

	private String vaccines;
	private int licenseId;
	private String otherCare;
	
	//pre: n/a
	//post: default constructor
	public VetVisitStandard()
	{
		super();
		this.setLicenseId(0);
		this.setOtherCare("**No Care**");
		this.setVaccines("**No Vaccines**");
	}
	
	//pre: super arguments and standard arguments
	//post: constructor with super and standard's arguments
	//aVisitId, aDate, aDoctor, aLocation,aDiagnosis, aTreatment, without Visit ID
	public VetVisitStandard(String theDate, String theDoctor, String theLocation, String vaccines, int License, String otherCare)
	{
		super(theDate, theDoctor, theLocation);
		this.setLicenseId(License);
		this.setVaccines(vaccines);
		this.setOtherCare(otherCare);
	}
	
	//pre: all of super's data, along with standard data
	//post: constructor with super and standard's arguments, with visit ID
	public VetVisitStandard(String theVisitId, String theDate, String theDoctor, String theLocation, String vaccines, int License, String otherCare)
	{
		super(theDate, theDoctor, theLocation);
		this.setLicenseId(License);
		this.setVaccines(vaccines);
		this.setOtherCare(otherCare);
		this.setVisitId(theVisitId);
	}
	
	//pre: String vaccines
	//post: sets vaccines
	public void setVaccines(String vaccines)
	{
		this.vaccines=vaccines;
	}
	
	//pre: int cityLicense
	//post: sets cityLicense
	public void setLicenseId(int licenseId)
	{
		this.licenseId=licenseId;
	}

	//pre: string otherCare
	//post: sets otherCare
	public void setOtherCare(String otherCare)
	{
		this.otherCare=otherCare;
	}
	
	//pre: n/a
	//post: returns vaccines
	public String getVaccines()
	{		
		return vaccines;
	}
	
	//pre:n/a
	//post: returns cityLicense
	public int getLicenseId()
	{
	
		return licenseId;
	}
	
	//pre: n/a
	//post: returns otherCare
	public String getOtherCare()
	{
		return otherCare;
	}
	
	//pre: n/a
	//post: returns super string appended on with Vaccines, Licenses, and other Care
	public String toString()
	{
		String blank=super.toString();
		String temp= blank + " Vaccine: "+ this.getVaccines()+ " License: "+this.getLicenseId()+ " Other Care: " +this.getOtherCare();
		return temp;
	}
	
}

**********************************************************************************************************************
VetVisitListUrgent.java
**********************************************************************************************************************
package lab6;

public class VetVisitUrgent extends VetVisit
{
	private String diagnosis;
	private String treatment;

	//pre: none
	//post// default super, default diagnosis and treatment
	public VetVisitUrgent()
	{
		super();
		this.setDiagnosis("**No Diagnosis**");
		this.setTreatment("**No Treatment**");
	}
	
	//pre: arguments from super, arguments from VetVisitUrgent
	//post: constructor with proper arguments without visitId
	public VetVisitUrgent(String theDate, String theDoctor, String theLocation, String diagnosis, String treatment)
	{
		super(theDate, theDoctor, theLocation);
		this.setDiagnosis(diagnosis);
		this.setTreatment(treatment);
	}
	
	//pre: arguments from super, arguments from VetVisitUrgent
	//post: constructor with proper arguments including visitId
	public VetVisitUrgent(String theVisitId, String theDate, String theDoctor, String theLocation, String diagnosis, String treatment)
	{
		super(theDate, theDoctor, theLocation);
		this.setDiagnosis(diagnosis);
		this.setTreatment(treatment);
		this.setVisitId(theVisitId);
	}


	//pre: diagnosis string
	//post: sets diagnosis
	public void setDiagnosis(String diagnosis)
	{
		this.diagnosis=diagnosis;
	}
	
	//pre: treatment String
	//post: sets treatment
	public void setTreatment(String treatment)
	{
		this.treatment=treatment;
	}
	
	//pre: n/a
	//post: returns treatment string
	public String getTreatment()
	{
		return treatment;
	}
	
	//pre: n/a
	//post: returns diagnosis string
	public String getDiagnosis()
	{
		return diagnosis;
	}
	
	//pre: n/a
	//post: returns appended string with super string followed by urgent's strings
	public String toString()
	{
		String blank=super.toString();
		String str=" Diagnosis: "+ this.getDiagnosis()+ " Treatment: "+ this.getTreatment();
		String temp=blank+str;
		return temp;
	}
}

**********************************************************************************************************************
HousePet.java
**********************************************************************************************************************
package lab6;

import java.io.PrintWriter;
import java.util.Scanner;

public class HousePet implements Comparable <HousePet>
{
	private int theChipId;
	private String theName;
	private String thePetType;
	private double theAge;
	private VetVisitList visitList ;
	

	
	public VetVisitList getVisitList()
	{
		return visitList;
	}
	
	// default constructor, creates a default HousePet instance
	// with chipId as 0, name as "**no name**", petType as "**no type**", 
	// and age as 0.0.
	public HousePet()
	{
		this.setChipId(0);
		this.setName("**No Name**");
		this.setPetType("**no type**");
		this.setAge(0.0);
		this.visitList=new VetVisitListImpl();
	}

	//pre: Receives data to initialize constructor
	//post: creates house pet with given data
	public HousePet(int theChipId, String theName, String thePetType, double theAge)
	{
		this.setChipId(theChipId);
		this.setName(theName);
		this.setPetType(thePetType);
		this.setAge(theAge);
		this.visitList=new VetVisitListImpl();

		//following if statements check the data
		//if any of the data is invalid, makes the field the default
		if(theChipId<0)
		{
			theChipId=0;
		}

		if(theName.length()==0)
		{
			theName="**No Name**";
		}

		if(thePetType.length()==0)
		{
			thePetType="**no type**";
		}

		if(theAge<0.0)
		{
			theAge=0.0;
		}

	}
	// creates a HousePet instance with the given data, if any is invalid
	// puts default value into field ( invalid data is a negative chipId or
	//  negative age)

	//pre: none
	//post: returns ChipId Value
	public int getChipId()
	{
		return theChipId;
	} // returns this house pet's chipId

	//pre: none
	//post: returns the name
	public String getName()
	{
		return theName;
	} // returns name of this house pet

	//pre: none
	//post: returns Pet Type
	public String getPetType()
	{
		return thePetType;
	} // returns the petType of this house pet

	//pre: none
	//Post: returns age value
	public double getAge()
	{
		return theAge;

	} // returns the age of this house pet

	//pre: chip ID value
	//post: sets chip ID value to given chip ID, 0 if invalid
	public void setChipId(int theChipId)
	{
		this.theChipId=theChipId;

		if(theChipId<0)
		{
			this.theChipId=0;
		}

	} // sets this HousePet's chipId to given number
	// or to 0 if invalid chipId given

	//pre: theName String
	//post: sets given string as name, returns no name if invalid
	public void setName(String theName)
	{
		this.theName=theName;
		if(theName.length()==0)
		{
			this.theName="**No Name**";
		}
	}
	//sets this HousePet's name to theName, if 
	// theName is blank, then uses default value

	//pre: thePetType string
	//post: sets the inputed string as the Pet Type
	public void setPetType(String thePetType)
	{
		this.thePetType=thePetType;

		if(thePetType.length()==0)
		{
			this.thePetType="**no type**";
		}
	}  //sets this HousePet's type to given type
	// if thePetType is blank, then uses default value

	//pre: theAge double value
	//post: sets the inputed value, returns 0.0 if invalid
	public void setAge(double theAge)
	{
		this.theAge=theAge;

		if(theAge<0.0)
		{
			this.theAge=0.0;
		}
	} // sets this HousePet's age to the given age

	//pre: none
	//post: returns readable string from setters
	public String toString()
	{
		String output="Chip ID: "+theChipId+" Name: "+theName+" Pet Type: "+ thePetType+" Age: "+theAge+""+"\n"+"Visit: "+visitList;
		return output;
		
		
		//Note: Your toString() method for the HousePet class will now have to include collecting the vet visit list instance for each house pet
		
	} // returns a readable string 
	// of this HousePet as ONE line of understandable text

	//pre: scanner
	//post: returns true and sets data if all the data in the document is correct
	public boolean readFromScanner(Scanner inputSource)
	{
		int aChipId=0;
		String aName="";
		String aType="";
		double aAge=0.0;		
		
		if(inputSource.hasNextInt())
		{
			aChipId=inputSource.nextInt();
			inputSource.nextLine();

			if(inputSource.hasNext())
			{
				aName=inputSource.nextLine();

				if(inputSource.hasNext())
				{
					aType=inputSource.nextLine();

					if(inputSource.hasNextDouble())
					{
						aAge=inputSource.nextDouble();

						this.theAge=aAge;
						this.theName=aName;
						this.thePetType=aType;
						this.theChipId=aChipId;
						MyUtils.vetVisitListReadFromScanner(inputSource,this.visitList);
						return true;
					}//end of Double

				}// end of aType

			}//end of if input Source

		}// end of if next

		return false;	
	} 


	//pre: housepet and HousePet
	//post: returns integer value to sort list
	public int compareTo(HousePet housepet)
	{
		int value=0;

		if(this.getChipId()<housepet.getChipId())
			value=-1;

		if(this.getChipId()>housepet.getChipId())
			value=1;

		return value;
	}

	//pre: housepet document and Housepet constructor
	//post: returns integer value after comparing strings to sort list
	public int compareByName(HousePet housepet)
	{
		int value=this.getName().compareTo(housepet.getName());

		if(this.getName().compareTo(housepet.getName())==0)
			value=this.compareTo(housepet);

		return value;
	}

	//pre: PrintWriter and outFile
	//Post: println Chip Id, Name, Pet Type, and Age to a file
	public void writeToFile(PrintWriter outFile) 
	{
		//include vet visit setters
		outFile.println(this.getChipId());
		outFile.println(this.getName());
		outFile.println(this.getPetType());
		outFile.println(this.getAge());
		outFile.println(this.getVisitList());

		outFile.checkError();

	}

}
//end of HousePet.java

**********************************************************************************************************************
HousePetList.java
**********************************************************************************************************************
/**
   HousePetList interface
   used to describe methods useful with a list of HousePet instances
   January 21, 2014
   cosc 2125
 */

package lab6;

import java.util.Scanner;

public interface HousePetList
{
	public static final int MAX_SIZE = 30; // max number of items in list
	public void readFromScanner(Scanner inputSource);
	// populates this list from inputSource until full or inputSource is exhausted
	// makes sure that list is sorted always in ascending order
	public void sortByChipIdentifier();
	// sorts the list by account number
	public void sortByName();
	// sorts the list by name, if 2 names match, break tie on account number field
	public boolean add(HousePet housepet);
	// tries to add housepet to list if room and not already in the list
	// returns true on successful add, false if unable to add
	// keeps list sorted in ascending order, assumes Comparable is implemented for
	// HousePet instances
	public HousePet remove(HousePet housepet);
	// tries to find and remove housepet from the list, if found 
	//  removes and returns that housepet from the list.
	//  assumes list is sorted in ascending order always using Comparable interface
	// if not found, returns null.
	public void removeAll();
	// removes ALL housepets
	public boolean contains(HousePet housepet);
	// returns true if housepet matches another housepet in the list
	// returns false if no match found ASSUMES HousePets are Comparable and
	// list is sorted always in ascending order
	public int size();
	// returns the current number of elements in the list+
	
	  // returns a String containing a  list of all housepets that 
    // have the given name, case insensitive
    // returns empty string if NO housepets match with given housePetName
    // (make sure you fix or solve the upper/lowercase string compare problem.)
   public String getHousePetsByName(String housePetName);

   // tries to find housepet with given chip id number, if found modifies age
   // to given newAge
   // if not found no changes made, returns false
   // pre: newAge >= 0
   // post: if theChipId matches housepet in current list, modify
   // age of that housepet to given newAge, returns true.  
   // If newAge < 0 returns false.
   public boolean  modifyAge(int theChipIdNumber, double newAge);

   // pre: receives a filename to save current list out to
   //      filename is a valid system filename 
   // post: writes current list to file with given filename.  Overwrites file
   //       with filename if that file currently exists, if not, creates file.
   // returns: true if list is saved to file, false if cannot write to file or any such output problem
   public boolean saveToFile(String filename);
  
   // pre: none
   // post: returns true if the current list has been saved, false if list has been modified since last saved
   public boolean isSaved();
   
   //pre:
   //post:
   public boolean addVetVisit(int chipId, VetVisit visit);
   
   public VetVisit removeVetVisit(int chipId, VetVisit visit);
   
}
**********************************************************************************************************************
HousePetListImpl.java
**********************************************************************************************************************
package lab6;

import java.io.File;
import java.util.GregorianCalendar;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

public class HousePetListImpl implements HousePetList
{
	//private variables
	private HousePet list[];
	private int count;
	private boolean saved;


	//pre: none
	//Post: blank constructor
	public HousePetListImpl()
	{
		this.list=new HousePet[HousePetList.MAX_SIZE];
		this.count=0;
		this.saved=true;
	}

	//pre: none
	//Post: returns string of list array, returns empty list if blank
	public String toString()
	{
		String blank="";

		if(this.count==0)
		{
			blank="Empty List";	
			return blank;
		}

		else
			for(int i=0; i<this.count; i++)
			{
				blank+=this.list[i]+"\n";
			}
		return blank;
	}

	//pre: scanner in
	//post: tries to take data from scanner and place it in an array
	public void readFromScanner(Scanner inputSource)
	{
		HousePet pet=new HousePet();
		boolean result=pet.readFromScanner(inputSource);
		while(result==true && this.count<HousePetList.MAX_SIZE)
		{
			
			boolean add=this.add(pet);
			if(add==false){
				System.out.println("Duplicate Chip Id found:"+pet);
				System.out.println("Duplicate house pets not added to the list.");
			}
			pet=new HousePet();
			result=pet.readFromScanner(inputSource);
		}
		this.sortByChipIdentifier();
	}

	//pre: none
	//post: sorts array by chip ID
	public void sortByChipIdentifier() 
	{
		{
			for(int i=0; i<count-1; i++)
			{
				int min=i;
				for(int k=i+1; k<count; k++)
				{
					if(this.list[k].compareTo(this.list[min])<0)
					{
						min=k;					
					}
				}
				HousePet temp=this.list[i];
				this.list[i]=this.list[min];
				this.list[min]=temp;
			}
		}
	}



	//pre: none
	//post: sorts list by name
	public void sortByName() 
	{
		for(int i=0; i<count-1; i++)
		{
			int min=i;
			for(int k=i+1; k<count; k++)
			{

				if(this.list[k].compareByName(this.list[min])<0)
				{
					min=k;					
				}
			}
			HousePet temp=this.list[i];
			this.list[i]=this.list[min];
			this.list[min]=temp;
		}

	}

	//pre: Housepet constructor and housepet object
	//post: Adds pet to the list, and reorganizes it
	//post: if list is full or pet already exists, doesn't add it to list
	public boolean add(HousePet housepet)
	{
		if(this.count>=HousePetList.MAX_SIZE)
		{	
			return false;
		}

		if(this.contains(housepet))
		{
			return false;
		}
		this.list[this.count]=housepet;
		this.count++;
		this.sortByChipIdentifier();
		this.saved=false;
		return true;

	}

	//pre: HousePet constructor and housepet object
	//post: searches for housepet, if not found returns null.  If successful, removes housepet from list, and reorganizes the list again.
	public HousePet remove(HousePet housepet) 
	{
		int location=this.binSearch(housepet);
		if(location==-1)
		{
			return null;
		}

		HousePet value=this.list[location];
		this.list[location]=this.list[count-1];
		count--;
		this.saved=false;
		this.sortByChipIdentifier();
		return value;
	}

	//pre: n/a
	//post: sets count to zero, clearing the array		this.saved=true;
	public void removeAll() 
	{
		this.count=0;
	}

	//pre: HousePet constructor and housepet object
	//post: returns false if the housepet is found, true if it isn't
	public boolean contains(HousePet housepet) 
	{
		//sortByChipIdentifier called to double check list order
		this.sortByChipIdentifier();
		// returns true if housepet matches another housepet in the list
		// returns false if no match found ASSUMES HousePets are Comparable and
		// list is sorted always in ascending order
		if(binSearch(housepet)<0)
		{
			return false;
		}

		else
			return true;
	}

	//pre: n/a
	//post: returns number of elements in the list
	public int size()
	{
		// returns the current number of elements in the list
		return this.count;
	}

	//pre: HousePet constructor and housepet object
	//post: returns values based on search results, -1 if not found at all
	private int binSearch(HousePet housepet)
	{
		int low=0;
		int high=this.count-1;

		while(low<=high)
		{
			int mid=(low+high)/2;
			int SearchValue=list[mid].compareTo(housepet);

			if(SearchValue==0)
				return mid;

			if(SearchValue>0)
				high=mid-1;

			else
				low=mid+1;

		}
		return -1;
	}

	//pre: housepet name string
	//post: returns string of housepet data, returns blank string if no housepet found
	public String getHousePetsByName(String housePetName) 
	{
		String petName="";
		for(int i=0; i<this.count; i++)
		{
			String str=this.list[i].getName();
			if(housePetName.compareToIgnoreCase(str)==0)
			{
				petName=petName+this.list[i]+"\n";
			}
		}

		return petName;
	}


	//pre: chipIdNumber and NewAge
	//post: modifies age based on given chipId and age, alters saved boolean and returns true
	public boolean modifyAge(int theChipIdNumber, double newAge) 
	{
		//don't forget to modify 'saved' boolean!!
		HousePet housepet=new HousePet();
		housepet.setChipId(theChipIdNumber);
		if(newAge<0)
			return false;

		int location=this.binSearch(housepet);
		if(location==-1)
		{
			return false;
		}

		else{
			this.list[location].setAge(newAge);
			this.saved=false;
			return true;
		}

	}

	//pre: string with filename
	//post: creates new file based on filename, returns false if file cannot be made
	public boolean saveToFile(String filename) 
	{
		PrintWriter outFile=null;

		try
		{
			outFile=new PrintWriter(new File(filename));
			for(int i=0; i<this.count; i++)
			{
				this.list[i].writeToFile(outFile);
			}
			outFile.close();
			this.saved=true;
			return true;

		} 
		catch (FileNotFoundException e) 
		{

			return false;
		}
	}


	// pre: none
	// post: returns true if the current list has been saved, false if list has been modified
	public boolean isSaved() 
	{
		return saved;
	}

	//chip id and vetvisit
	//returns true if successfully added, false if not
	public boolean addVetVisit(int chipId, VetVisit visit) 
	{
	
		
		HousePet housepet=new HousePet();
		housepet.setChipId(chipId);
		int location=binSearch(housepet);
		
		if(location==-1)
		{
			return false;
		}
		
		VetVisitList aList=list[location].getVisitList();
			boolean result=aList.add(visit);
			this.saved=false;
			return result;
		//find new housepet with ID and construct new housepet
		//if not found return false
		//if found get VisitList at that location
			//aList=list[location].getVisitList();
		//boolean result=aList.add(visit);
		//return result
		
	}

	//pre:chipId and vetvisit vist
	//post: removes vetvisit from chipId and returns the result and sends the removed visit to an outfile
	public VetVisit removeVetVisit(int chipId, VetVisit visit) 
	{
		//VetVisit removeVisit=aList.remove(visit)
		//if removed, add to cancel.txt, append it, and close the document
		//return removeVisit
		HousePet housepet=new HousePet();
		housepet.setChipId(chipId);
		int location=binSearch(housepet);
		
		if(location==-1)
		{
			return null;
		}
		VetVisitList aList=list[location].getVisitList();
		VetVisit result = aList.remove(visit);
		if(result==null)
		{
			return null;
		}
		
		PrintWriter outFile=null;

		try
		{
			outFile = new PrintWriter(new FileWriter("cancel.txt", true));
			outFile.println("removed visit from chip Id: " + chipId);
			GregorianCalendar today = new GregorianCalendar(); 
			outFile.println(MyUtils.dateToString(today) + "     " + result);
			outFile.close();

		} 
		catch(FileNotFoundException e){

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		this.saved=false;
		return result;
		
		
		
	
	}


}
**********************************************************************************************************************
Lab3MenuTest.java
**********************************************************************************************************************
package lab6;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

//the test class for the menu driven program
public class Lab3MenuTest
{
	// the main method that starts everything
	public static void main(String args[] )
	{
		// create a list of HousePet objects
		HousePetList myList = new HousePetListImpl();  

		char option = '$';
		do
		{
			displayMenuToUser(); // show menu options to user 
			option = getUserSelection();  // get user's option
			switch(option)
			{
			case 'a': populateList(myList);
			break;
			case 'b': menuAdd(myList);
			break;
			case 'c': menuRemove(myList);
			break;
			case 'd': removeAll(myList);
			break;
			case 'e':viewList(myList);
			break;
			case 'f': menuSearch(myList);
			break;
			case 'g': listSize(myList);
			break;
			case 'h': petNameSearch(myList);
			break;
			case 'i': modifyAge(myList);
			break;
			case 'j': saveList(myList);
			break;
			case 'k': addVetVisit(myList);
			break;
			case 'l': removeVetVisit(myList);
			break;
			case 'q': exitMessage(myList);

			} // end switch
		}
		while( option !='q') ;
	} // end main


	//pre:n/a
	//post: displays menu options to the user
	public static void displayMenuToUser() 
	{
		/*
	a) populate list from user supplied data file
   b) add housepet to the list
   c) remove house pet from the list
   d) remove all house pets from the list
   e) view the current list
   f) check if an house pet is in the list
   g) get the size of the list
   h) find all house pets with a given name
   i) modify the age of a given house pet's chip id
   j) save the current list out to a file
   k) add a vet visit for a house pet
   l) remove a vet visit for a house pet
   q) quit  (checks if current list is saved, and if not asks to save before exiting)

		 */
		System.out.println("Welcome to the Rad Pet List Storter!  Pick a command: \n");
		System.out.println("a) Populate data from your own list... ");
		System.out.println("b) Add a pet to the list... ");
		System.out.println("c) Remove a pet from the list... ");
		System.out.println("d) Remove all pets from the list... ");
		System.out.println("e) view the list... ");
		System.out.println("f) check if a pet is in the list... ");
		System.out.println("g) check the size of the list... ");
		System.out.println("h) find all pets with given name...");
		System.out.println("i) modify age...");
		System.out.println("j) save list...");
		System.out.println("k) add a vet visit for a house pet...");
		System.out.println("l) remove a vet visit for a housepet...");
		System.out.println("q) quit the rad pet list sorter.");
	}

	//pre: n/a
	//post: returns the user choice
	public static char getUserSelection ()
	{  
		char choice;
		String answer; // holds the user's selection
		Scanner input = new Scanner (System.in);

		do {
			System.out.print("Enter your selection: ");
			answer = input.nextLine();
			choice = Character.toLowerCase(answer.charAt(0));
		} while ( choice !='k' && choice !='a' && choice !='b' &&
				choice !='c' && choice !='d' && choice !='e' && choice !='f' && choice !='g'  && choice !='h'
				&& choice !='i' && choice !='j' && choice!='l' && choice!='q'); 
		// assuming a-h are good and h is quit (modify as needed for options) 
		return choice;
	} 

	//pre: HousePetList and myList
	//post: populates list from user supplied file if successful, returns error message otherwise
	public static void populateList(HousePetList myList) 
	{
		//Case A
		Scanner console=new Scanner(System.in);
		System.out.println("Please enter a file name:");
		String fileName=console.nextLine();

		try {
			Scanner input = new Scanner(new File(fileName));
			myList.readFromScanner(input);
			System.out.println("File Added! \n");
		}catch (FileNotFoundException e) {
			System.out.println("error, cannot open file." +
					" NOT FOUND, no data can be read");
		}
	}

	//pre: HousePetList and myList
	//post: returns a message if the pet was added successfully
	public static void menuAdd(HousePetList myList)
	{
		//Case B
		Scanner input = new Scanner(System.in);
		HousePet housepet = new HousePet(); 
		// create object to be added
		System.out.println("enter data for your house pet, return at each entry: (ID, Name, Type, Age...)");
		housepet.readFromScanner(input);  //  read in data for Account
		boolean result = myList.add(housepet);  // call the add method of add
		if (result) // if we got back a true from add
			System.out.println(housepet + "\nYour pet was added successfully to the list! \n");
		else
			System.out.println(housepet + "\nYour pet was NOT added to the list... \n");
		return;
	} // end MenuAdd


	//pre: HousePetList and myList
	//post: returns successful or failed message at removing the pet from the list
	public static void menuRemove(HousePetList myList) 
	{
		//Case C
		Scanner console=new Scanner(System.in);
		HousePet housepet = new HousePet();

		System.out.println("Please select a house pet you'd like to remove, return at each entry: (ID, Name, Type, Age)");
		housepet.readFromScanner(console);

		if(myList.remove(housepet)==null)
			System.out.println("The selected house pet was not removed. \n");
		else
			System.out.println("The selected house pet was successfully removed. \n");

	}

	//pre: HousePetList and myList
	//post: calls method to set count to 0
	public static void removeAll(HousePetList myList) 
	{
		//Case D
		myList.removeAll();
		System.out.println("List cleared \n");
	}

	//pre: HousePetList myList
	//post: displays current list
	public static void viewList(HousePetList myList) 
	{
		//Case E
		System.out.println("Your list is as follows...\n");
		System.out.println(myList);
	}

	//pre: HousePetList and myList
	//Post: searches list and returns a message with the results
	public static void menuSearch(HousePetList myList) 
	{
		//Case F
		Scanner console=new Scanner(System.in);
		HousePet housepet = new HousePet(); 

		System.out.println("Please enter a house pet you want to search, return at each entry: (ID, Name, Type, Age)");
		housepet.readFromScanner(console);
		boolean result=myList.contains(housepet);

		if(result==false)
			System.out.println("That pet is not in the list... \n");
		else
			System.out.println("That pet is in the list!\n");
	}

	//pre: HousePetList and myList
	//post: returns a message with the size of the list
	public static void listSize(HousePetList myList)
	{
		//case g
		int size=myList.size();
		System.out.println("The size of your list is: "+ size+ "\n");
	}

	//pre: HousePetList and myList
	//post: returns a string of housepets found with given name, blank if none are found
	public static void petNameSearch(HousePetList myList) 
	{
		//Case H

		  // returns a String containing a  list of all housepets that 
	    // have the given name, case insensitive
	    // returns empty string if NO housepets match with given housePetName
	    // (make sure you fix or solve the upper/lowercase string compare problem.)
		
		Scanner console=new Scanner(System.in);
		System.out.println("Please enter a pet name:");
		String userHousePet=console.nextLine();
		String myHousePetName=myList.getHousePetsByName(userHousePet);
		System.out.println(myHousePetName);
		
	}



	//pre: HousePetList myList
	//post: Alters housepet age and returns a string if it was done successfuly or not
	public static void modifyAge(HousePetList myList) 
	{
		//case I
		Scanner scan=new Scanner(System.in);

		System.out.println("Please enter a Chip Id: ");
		int userChipId=scan.nextInt();

		System.out.println("Please enter the new age: ");
		double newAge=scan.nextDouble();

		if(myList.modifyAge(userChipId, newAge)==true)
			System.out.println("Your pet's age was successfully modified! \n");
		else
			System.out.println("Your pet's age was not modified...\n");

	}

	//pre: HousePetList and myList
	//post: tries saves the file based on user input, returns true if successful
	private static void saveList(HousePetList myList) 
	{
		//case J
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter a file name: ");
		String filename=scan.nextLine();
		
		boolean result=myList.saveToFile(filename);
		
		if(result==true)
		{
			System.out.println("Your list was successfully saved!\n");
		}
		else
			System.out.println("Your list was not saved...");


	}


	//pre: HousePetList and myList
	//post: Checks if list is saved, prompts user to save, then terminates the program, 
	public static void exitMessage(HousePetList myList)
	{
		//case k
		Scanner scan=new Scanner(System.in);
		
		boolean saved=myList.isSaved();
		if(saved==false){
			System.out.println("Would you like to save? Y/N");
			String choice=scan.nextLine();
			if(choice.equalsIgnoreCase("Y")){
				saveList(myList);
			}
		}
				System.out.println("Program Terminated");
	}
	
	//pre: HousePetList and myList
	//post: adds vet visit list to given pet chipID
	public static void addVetVisit(HousePetList myList) 
	{
		//case K
		/*
 		this.setVisitId(generateNewId());
		this.setDate("1/1/2000");
		this.setDoctor("**no doctor**");
		this.setLocation("**no location**");
		 * */
		
		Scanner scan=new Scanner(System.in);
		
		System.out.println("Please enter a chip ID for the house pet: ");
		int chipId=scan.nextInt();
		scan.nextLine();
		
		System.out.println("Please enter the date: (MM/DD/YYYY): ");
		String date=scan.nextLine();
		
		System.out.println("Please enter the doctor name: ");
		String doctor=scan.nextLine();
		
		System.out.println("Please enter the location: ");
		String location=scan.nextLine();
		
		
		System.out.println("Is the vet visit standard or urgent? (S/U)");
		String userChoice=scan.nextLine();
		
		if(userChoice.equalsIgnoreCase("S"))
		{
			System.out.println("Please enter vaccines: ");
			String vaccines=scan.nextLine();
			
			System.out.println("Please enter the license ID: ");
			int licenseId=scan.nextInt();
			scan.nextLine();

			
			System.out.println("Please enter any other care: ");
			String otherCare=scan.nextLine();
			VetVisit visit=new VetVisitStandard(date, doctor, location, vaccines, licenseId, otherCare);
			
			
			if(myList.addVetVisit(chipId, visit))
			{
			System.out.println("Standard visit added!");
			}
			else
				System.out.println("Standard visit failed to add...");
		}
		
		if(userChoice.equalsIgnoreCase("U"))
		{

			System.out.println("Please enter the diagnosis: ");
			String diagnosis=scan.nextLine();
			
			System.out.println("Please enter the treatment");
			String treatment=scan.nextLine();
			VetVisit visit=new VetVisitUrgent(date, doctor, location, diagnosis, treatment);

			if(myList.addVetVisit(chipId, visit)){
			System.out.println("Urgent Visit Added!");
			}
			else
				System.out.println("Urgent Visit failed to add....");
		}
		
	}
	
	//pre: HousePetList myList
	//post: removes vet visit list data
	public static void removeVetVisit(HousePetList myList) 
	{
		//Case L
		Scanner input = new Scanner(System.in);
		
		System.out.println("Please enter the Chip ID: ");
		int chipId = input.nextInt();
		System.out.println("Please enter the Vet Visit Date: ");
		String visitDate = input.next();
		System.out.println("Please enter the visit ID: ");
		String visitId = input.next();
		System.out.println("Is the visit urgent or standard?: U/S ");
		String answer = input.next();
		VetVisit visit = null;
		
		if(answer.equalsIgnoreCase("S"))
		{
			visit = new VetVisitStandard();
			visit.setVisitId(visitId);
			visit.setDate(visitDate);
			
			VetVisit result = myList.removeVetVisit(chipId, visit);
			if(result == null){
				System.out.println("Unable to remove visit...");
			}
			else{
				System.out.println("Removed visit!");
			}
		}
		
		else
		{
			visit = new VetVisitUrgent();
			visit.setVisitId(visitId);
			visit.setDate(visitDate);
			
			VetVisit result = myList.removeVetVisit(chipId, visit);
			if(result == null){
				System.out.println("Unable to remove visit...");
			}
			else{
				System.out.println("Removed visit!");
			}
		}
		
	}


} // end MenuTest class

**********************************************************************************************************************
MyUtils.java
**********************************************************************************************************************
package lab6;

import java.util.*;

public class MyUtils 
{
  public static String dateToString(GregorianCalendar date)
  // receives: a date as a GregorianCalendar
  // returns: received date as a string in format mm/dd/yyyy
  {  String temp="";
     int month = date.get(Calendar.MONTH);
     month++; // add 1 due to zero-based months
     int day = date.get(Calendar.DAY_OF_MONTH);
     int year = date.get(Calendar.YEAR);
     temp = month + "/" + day + "/" + year;
     return temp;
  }
  public static GregorianCalendar stringToDate(String theDate)
  // receives: theDate as a String in format mm/dd/yyyy
  // returns: received date as a correct GregorianCalendar object
  {
    StringTokenizer tokenizer = new StringTokenizer(theDate, "/");
    String temp = tokenizer.nextToken();  // grabs up to "/"
    int month=0, day=1, year=2000;  // default date values
    try {
      month = Integer.parseInt(temp);
      month--;  // zero-based months
      temp = tokenizer.nextToken();
      day = Integer.parseInt(temp);
      temp = tokenizer.nextToken();
      year = Integer.parseInt(temp);
    }
    catch(NumberFormatException e) {
       System.out.println("error extracting date, using default date");
    }
    return new GregorianCalendar(year, month, day);
  }

	// put the next 2 methods in MyUtils class


	// pre: in is open and ready to read from
	// post: reads 1 VetVisit (either urgent or standard) and returns that as a VetVisit instance of
	//       the appropriate type, returns null if no visit available to read or end of visit list.
	public static VetVisit vetVisitReadFromScanner(Scanner in)
	   {
		   VetVisit visit = null;
		   int aLicenseNumber;
		   String line1,  aVisitId;
		   String aDoctor, aLocation, aDate, aOtherCare, aTreatment, aDiagnosis, aVaccines;
		   aVisitId = in.next();
                 // now check did we read the **** value?
		   if(aVisitId.equals("****"))
			   return null;  // if so, return null, so caller knows no more data 
		   aDate = in.next();
		   aLocation = in.next();
		   aDoctor = in.nextLine();
		   line1 = in.nextLine();  
		   // now check if what we see next is a license number (for Standard) or it must be an Urgent type 
		   if(in.hasNextInt())
		   {	   aVaccines = line1;
			   aLicenseNumber = in.nextInt();
			   aOtherCare = in.nextLine();
			   visit = new VetVisitStandard(aVisitId,aDate,aDoctor,aLocation, aVaccines, aLicenseNumber,aOtherCare);
		   }
		   else
		   {
			   aDiagnosis = line1;
			   aTreatment = in.nextLine();
			   visit = new VetVisitUrgent(aVisitId, aDate, aDoctor, aLocation,
					       aDiagnosis, aTreatment);
			   
					         			   
		   }
		   return visit;  // sends back one of the two possible visit types, whichever was created.
		   
	   }   
	   
	   
	// belongs in MyUtils
	// use this to populate/read the VetVisitList for a HousePet, reads 1 entire set of data
	// for the entire list of vetvisits for the current HousePet, called from HousePet's read from Scanner
	public static void vetVisitListReadFromScanner(Scanner in, VetVisitList aList)
	{
		VetVisit visit = MyUtils.vetVisitReadFromScanner(in);
		while (visit != null)
		{
			aList.add(visit);
			visit = MyUtils.vetVisitReadFromScanner(in);
			
		}
		
	}

}// end of MyUtils class
**********************************************************************************************************************
Node.java
**********************************************************************************************************************
package lab6;

public class Node<T>
{

    public T data; 
    public Node<T> link;

    //default constructor 
    public Node()
	{
	    this.data = null;
	    this.link = null;
	}//end of constructor

    public Node(T theData)
	{
	    this.data = theData;
	    this.link = null;
	}

    public Node(Node<T> theLink)
	{
	    this.data = null;
	    this.link = theLink;
	}

    public Node(T theData, Node<T> theLink)
	{
	    this.data = theData;
	    this.link = theLink;
	}

}//End of Node<T> public class. 
