*************************
Baron Heinrich
COSC 2125/2325
Lab 2
02/10/14
*************************


*************************
HousePetList.java
*************************
/**
   HousePetList interface
   used to describe methods useful with a list of HousePet instances
   January 21, 2014
   cosc 2125
 */

package lab3;

import java.util.Scanner;

public interface HousePetList
{
	public static final int MAX_SIZE = 30; // max number of items in list
	public void readFromScanner(Scanner inputSource);
	// populates this list from inputSource until full or inputSource is exhausted
	// makes sure that list is sorted always in ascending order
	public void sortByChipIdentifier();
	// sorts the list by account number
	public void sortByName();
	// sorts the list by name, if 2 names match, break tie on account number field
	public boolean add(HousePet housepet);
	// tries to add housepet to list if room and not already in the list
	// returns true on successful add, false if unable to add
	// keeps list sorted in ascending order, assumes Comparable is implemented for
	// HousePet instances
	public HousePet remove(HousePet housepet);
	// tries to find and remove housepet from the list, if found 
	//  removes and returns that housepet from the list.
	//  assumes list is sorted in ascending order always using Comparable interface
	// if not found, returns null.
	public void removeAll();
	// removes ALL housepets
	public boolean contains(HousePet housepet);
	// returns true if housepet matches another housepet in the list
	// returns false if no match found ASSUMES HousePets are Comparable and
	// list is sorted always in ascending order
	public int size();
	// returns the current number of elements in the list
}

*************************
HousePetListImpl.java
*************************
package lab3;

import java.util.*;

public class HousePetListImpl implements HousePetList
{
	//private variables
	private HousePet list[];
	private int count;

	//pre: none
	//Post: blank constructor
	public HousePetListImpl()
	{
		this.list=new HousePet[HousePetList.MAX_SIZE];
		this.count=0;
	}

	//pre: none
	//Post: returns string of list array, returns empty list if blank
	public String toString()
	{
		String blank="";

		if(this.count==0)
		{
			blank="Empty List";	
			return blank;
		}

		else
			for(int i=0; i<this.count; i++)
			{
				blank+=this.list[i]+"\n";
			}
		return blank;
	}

	//pre: scanner in
	//post: tries to take data from scanner and place it in an array
	public void readFromScanner(Scanner inputSource)
	{
		HousePet pet=new HousePet();
		boolean result=pet.readFromScanner(inputSource);
		while(result==true && this.count<HousePetList.MAX_SIZE)
		{
			this.list[count]=pet;
			this.count ++;
			pet=new HousePet();
			result=pet.readFromScanner(inputSource);
		}
		this.sortByChipIdentifier();

	}

	//pre: none
	//post: sorts array by chip ID
	public void sortByChipIdentifier() 
	{
		{
			for(int i=0; i<count-1; i++)
			{
				int min=i;
				for(int k=i+1; k<count; k++)
				{

					if(this.list[k].compareTo(this.list[min])<0)
					{
						min=k;					
					}



				}
				HousePet temp=this.list[i];
				this.list[i]=this.list[min];
				this.list[min]=temp;
			}

		}
	}



	//pre: none
	//post: sorts list by name
	public void sortByName() 
	{
		for(int i=0; i<count-1; i++)
		{
			int min=i;
			for(int k=i+1; k<count; k++)
			{

				if(this.list[k].compareByName(this.list[min])<0)
				{
					min=k;					
				}



			}
			HousePet temp=this.list[i];
			this.list[i]=this.list[min];
			this.list[min]=temp;
		}

	}

	//pre: Housepet constructor and housepet object
	//post: Adds pet to the list, and reorganizes it
	//post: if list is full or pet already exists, doesn't add it to list
	public boolean add(HousePet housepet)
	{
		if(this.count>=HousePetList.MAX_SIZE)
			return false;

		if(this.contains(housepet))
			return false;

		this.list[this.count]=housepet;
		this.count++;
		this.sortByChipIdentifier();
		return true;
	}

	//pre: HousePet constructor and housepet object
	//post: searches for housepet, if not found returns null.  If successful, removes housepet from list, and reorganizes the list again.
	public HousePet remove(HousePet housepet) 
	{
	    int location=this.binSearch(housepet);
	    if(location==-1)
		return null;
	    
	    HousePet value=this.list[location];
	    this.list[location]=this.list[count-1];
	    count--;
	    
	    this.sortByChipIdentifier();
	    return value;
	}

	//pre: n/a
	//post: sets count to zero, clearing the array
	public void removeAll() 
	{
		this.count=0;
	}

	//pre: HousePet constructor and housepet object
	//post: returns false if the housepet is found, true if it isn't
	public boolean contains(HousePet housepet) 
	{
	    //sortByChipIdentifier called to double check list order
		this.sortByChipIdentifier();
		// returns true if housepet matches another housepet in the list
		// returns false if no match found ASSUMES HousePets are Comparable and
		// list is sorted always in ascending order
		if(binSearch(housepet)<0)
		{
			return false;
		}

		else
			return true;
	}

	//pre: n/a
	//post: returns number of elements in the list
	public int size() {
		// returns the current number of elements in the list

		int elements=0;
		for(int i=0; i<count; i++)
		{
			elements++;
		}
		return elements;
	}

	//pre: HousePet constructor and housepet object
	//post: returns values based on search results, -1 if not found at all
	private int binSearch(HousePet housepet)
	{
		int low=0;
		int high=this.count-1;

		while(low<=high)
		{
			int mid=(low+high)/2;
			int SearchValue=list[mid].compareTo(housepet);

			if(SearchValue==0)
				return mid;

			if(SearchValue>0)
				high=mid-1;

			else
				low=mid+1;

		}
		return -1;
	}

}

*************************
HousePetListTest.java
*************************
package lab3;
/** cosc 2125 lab #3 test file
 * date: January 21, 2014
 * tests interface HousePetList
 * assumes housepet.txt data file is available for use
 * outputs to screen list of house pets from data file
 *
 */


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class HousePetListTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		HousePetList myList = new HousePetListImpl();
		Scanner inputSource = null;
		try {
			inputSource = new Scanner(new File("housepet.txt"));
		}catch (FileNotFoundException e) {
			System.out.println("error, cannot open file 'housepet.txt'," +
					" NOT FOUND, no data read");
			return;
		}
		myList.readFromScanner(inputSource);
		System.out.println("Current list of House Pets from input: \n" + myList);
		myList.sortByChipIdentifier();
		System.out.println("House Pets sorted by Chip Identifier \n" + myList);
		myList.sortByName();
		System.out.println("House Pets sorted by Name \n" + myList); 
		System.out.println("Now working with an empty list");
		HousePetList myList2 = new HousePetListImpl();
		System.out.println("Current list of House Pets (should be empty) \n" + myList2);
		myList2.sortByChipIdentifier();
		System.out.println("House Pets sorted by Chip Identifier (should be empty) \n" 
				+ myList2);
		myList2.sortByName();
		System.out.println("House Pets sorted by Name (should be empty) \n" + myList2); 



	}

}
*************************
Lab3MenuTest.java
*************************
package lab3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

//the test class for the menu driven program
public class Lab3MenuTest
{
	// the main method that starts everything
	public static void main(String args[] )
	{
		// create a list of HousePet objects
		HousePetList myList = new HousePetListImpl();  

		char option = '$';
		do
		{
			displayMenuToUser(); // show menu options to user 
			option = getUserSelection();  // get user's option
			switch(option)
			{
			case 'a': populateList(myList);
			break;
			case 'b': menuAdd(myList);
			break;
			case 'c': menuRemove(myList);
			break;
			case 'd': removeAll(myList);
			break;
			case 'e':viewList(myList);
			break;
			case 'f': menuSearch(myList);
			break;
			case 'g': listSize(myList);
			break;
			case 'h': exitMessage();
			} // end switch
		}
		while( option !='h') ;
	} // end main

	//pre:n/a
	//post: displays menu options to the user
	public static void displayMenuToUser() 
	{
		/*  a) populate list from user supplied data file
	   b) add account to the list
	   c) remove account from the list
	   d) remove all accounts from the list
	   e) view the current list
	   f) check if an account is in the list
	   g) get the size of the list
	   h) quit */
		System.out.println("Welcome to the Rad Pet List Storter!  Pick a command: \n");
		System.out.println("a) Populate data from your own list... ");
		System.out.println("b) Add a pet to the list... ");
		System.out.println("c) Remove a pet from the list... ");
		System.out.println("d) Remove all pets from the list... ");
		System.out.println("e) view the list... ");
		System.out.println("f) check if a pet is in the list... ");
		System.out.println("g) check the size of the list... ");
		System.out.println("h) quit the rad pet list sorter");
	}
	
	//pre: HousePetList and myList
	//post: populates list from user supplied file if successful, returns error message otherwise
	public static void populateList(HousePetList myList) 
	{
		Scanner console=new Scanner(System.in);
		System.out.println("Please enter a file name:");
		String fileName=console.nextLine();

		try {
			Scanner input = new Scanner(new File(fileName));
			myList.readFromScanner(input);
			System.out.println("File Added! \n");
		}catch (FileNotFoundException e) {
			System.out.println("error, cannot open file." +
					" NOT FOUND, no data can be read");
		}
	}

	//pre: n/a
	//post: returns the user choice
	public static char getUserSelection ()
	{  
		char choice;
		String answer; // holds the user's selection
		Scanner input = new Scanner (System.in);

		do {
			System.out.print("Enter your selection: ");
			answer = input.nextLine();
			choice = Character.toLowerCase(answer.charAt(0));
		} while ( choice !='h' && choice !='a' && choice !='b' &&
				choice !='c' && choice !='d' && choice !='e' && choice !='f' && choice !='g'); 
		// assuming a-h are good and h is quit (modify as needed for options) 
		return choice;
	} 

	//pre: HousePetList and myList
	//post: returns a message if the pet was added successfully
	public static void menuAdd(HousePetList myList)
	{
		Scanner input = new Scanner(System.in);
		HousePet housepet = new HousePet(); 
		// create object to be added
		System.out.println("enter data for your house pet, return at each entry: (ID, Name, Type, Age...)");
		housepet.readFromScanner(input);  //  read in data for Account
		boolean result = myList.add(housepet);  // call the add method of add
		if (result) // if we got back a true from add
			System.out.println(housepet + "\nYour pet was added successfully to the list! \n");
		else
			System.out.println(housepet + "\nYour pet was NOT added to the list... \n");
		return;
	} // end MenuAdd

	/** prompts the user for a menu selection
  reads and verifies selection, returns only
  a valid selection, loops until a valid selection is given
 @return - the valid selection as input
	 */

	//pre: HousePetList and myList
	//post: returns successful or failed message at removing the pet from the list
	public static void menuRemove(HousePetList myList) 
	{
		Scanner console=new Scanner(System.in);
		HousePet housepet = new HousePet();

		System.out.println("Please select a house pet you'd like to remove, return at each entry: (ID, Name, Type, Age)");
		housepet.readFromScanner(console);

		if(myList.remove(housepet)==null)
			System.out.println("The selected house pet was not removed. \n");
		else
			System.out.println("The selected house pet was successfully removed. \n");

	}

	//pre: HousePetList and myList
	//post: calls method to set count to 0
	public static void removeAll(HousePetList myList) 
	{
		myList.removeAll();
		System.out.println("List cleared \n");
	}

	//pre: HousePetList myList
	//post: displays current list
	public static void viewList(HousePetList myList) 
	{
		System.out.println("Your list is as follows...\n");
		System.out.println(myList);
	}

	//pre: HousePetList and myList
	//Post: searches list and returns a message with the results
	public static void menuSearch(HousePetList myList) 
	{
		//fix menu list
		Scanner console=new Scanner(System.in);
		HousePet housepet = new HousePet(); 

		System.out.println("Please enter a house pet you want to search, return at each entry: (ID, Name, Type, Age)");
		housepet.readFromScanner(console);
		boolean result=myList.contains(housepet);

		if(result==false)
			System.out.println("That pet is not in the list... \n");
		else
			System.out.println("That pet is in the list!\n");


	}


	//pre: HousePetList and myList
	//post: returns a message with the size of the list
	public static void listSize(HousePetList myList)
	{
		int size=myList.size();
		System.out.println("The size of your list is: "+ size+ "\n");
		// TODO Auto-generated method stub

	}


	//pre: n/a
	//post: terminates the program
	public static void exitMessage()
	{
		System.out.println("Program Terminated");
	}

} // end MenuTest class
